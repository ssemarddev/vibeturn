{"version":3,"file":"visitors-report-charts-65ad76da.js","sources":["../../../common/foundation/resources/client/ui/library/i18n/formatted-bytes.tsx","../../../common/foundation/resources/client/admin/analytics/use-admin-report.ts","../../../common/foundation/resources/client/ui/library/icons/material/TrendingDown.tsx","../../../common/foundation/resources/client/ui/library/icons/material/TrendingFlat.tsx","../../../common/foundation/resources/client/admin/analytics/admin-report-card-row.tsx","../../../common/foundation/resources/client/charts/bar-chart.tsx","../../../common/foundation/resources/client/admin/analytics/visitors-report-charts.tsx"],"sourcesContent":["import {Fragment, memo} from 'react';\nimport {prettyBytes} from '@ui/utils/files/pretty-bytes';\n\ninterface FormattedBytesProps {\n  bytes?: number;\n}\nexport const FormattedBytes = memo(({bytes}: FormattedBytesProps) => {\n  return <Fragment>{prettyBytes(bytes)}</Fragment>;\n});\n","import {keepPreviousData, useQuery} from '@tanstack/react-query';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {apiClient} from '@common/http/query-client';\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {ReactElement} from 'react';\nimport {SvgIconProps} from '@ui/icons/svg-icon';\nimport {IconTree} from '@ui/icons/create-svg-icon';\n\nconst Endpoint = 'admin/reports';\n\nexport interface HeaderCardData {\n  icon: IconTree[] | ReactElement<SvgIconProps>;\n  name: string;\n  type?: 'number' | 'fileSize' | 'percentage';\n  currentValue: number;\n  previousValue?: number;\n  percentageChange?: number;\n}\n\ninterface FetchAnalyticsReportResponse extends BackendResponse {\n  visitorsReport: VisitorsReportData;\n  headerReport: HeaderCardData[];\n}\n\ninterface Payload {\n  types?: ('visitors' | 'header')[];\n  dateRange?: DateRangeValue;\n}\nexport function useAdminReport(payload: Payload = {}) {\n  return useQuery({\n    queryKey: [Endpoint, payload],\n    queryFn: () => fetchAnalyticsReport(payload),\n    placeholderData: keepPreviousData,\n  });\n}\n\nfunction fetchAnalyticsReport({\n  types,\n  dateRange,\n}: Payload): Promise<FetchAnalyticsReportResponse> {\n  const params: Record<string, any> = {};\n  if (types) {\n    params.types = types.join(',');\n  }\n  if (dateRange) {\n    params.startDate = dateRange.start.toAbsoluteString();\n    params.endDate = dateRange.end.toAbsoluteString();\n    params.timezone = dateRange.start.timeZone;\n  }\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\n}\n","import {createSvgIcon} from '../create-svg-icon';\n\nexport const TrendingDownIcon = createSvgIcon(\n  <path d=\"m16 18 2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6h-6z\" />\n, 'TrendingDownOutlined');\n","import {createSvgIcon} from '../create-svg-icon';\n\nexport const TrendingFlatIcon = createSvgIcon(\n  <path d=\"m22 12-4-4v3H3v2h15v3l4-4z\" />\n, 'TrendingFlatOutlined');\n","import {HeaderCardData} from '@common/admin/analytics/use-admin-report';\nimport React, {\n  cloneElement,\n  Fragment,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n} from 'react';\nimport {TrendingUpIcon} from '@ui/icons/material/TrendingUp';\nimport {TrendingDownIcon} from '@ui/icons/material/TrendingDown';\nimport {createSvgIconFromTree, IconTree} from '@ui/icons/create-svg-icon';\nimport {FormattedNumber} from '@ui/i18n/formatted-number';\nimport {FormattedBytes} from '@ui/i18n/formatted-bytes';\nimport {TrendingFlatIcon} from '@ui/icons/material/TrendingFlat';\nimport {AnimatePresence, m} from 'framer-motion';\nimport {opacityAnimation} from '@ui/animation/opacity-animation';\nimport {Skeleton} from '@ui/skeleton/skeleton';\nimport {SvgIconProps} from '@ui/icons/svg-icon';\nimport clsx from 'clsx';\nimport {Trans} from '@ui/i18n/trans';\nimport {FormattedDuration} from '@ui/i18n/formatted-duration';\n\ninterface AdminHeaderReportProps {\n  report?: HeaderCardData[];\n  isLoading?: boolean;\n}\nexport function AdminReportCardRow({\n  report,\n  isLoading,\n}: AdminHeaderReportProps) {\n  if (!report) return <div className=\"col-span-12 row-span-3\" />;\n  return (\n    <Fragment>\n      {report?.map(data => (\n        <ReportCard\n          key={data.name}\n          icon={data.icon}\n          type={data.type}\n          currentValue={data.currentValue}\n          previousValue={data.previousValue}\n          percentageChange={data.percentageChange}\n          isLoading={isLoading}\n        >\n          <Trans message={data.name} />\n        </ReportCard>\n      ))}\n    </Fragment>\n  );\n}\n\ninterface ReportCardProps {\n  icon?: IconTree[] | ReactElement<SvgIconProps>;\n  type?: 'number' | 'fileSize' | 'percentage' | 'durationInSeconds';\n  currentValue: number | null;\n  previousValue?: number | null;\n  percentageChange?: number;\n  isLoading?: boolean;\n  children: ReactNode;\n  colSpan?: string;\n  rowSpan?: string;\n}\nexport function ReportCard({\n  icon: propsIcon,\n  children,\n  type,\n  currentValue,\n  previousValue,\n  percentageChange,\n  isLoading = false,\n  colSpan = 'col-span-3',\n  rowSpan = 'row-span-3',\n}: ReportCardProps) {\n  let icon;\n  if (propsIcon) {\n    if (isValidElement(propsIcon)) {\n      icon = cloneElement(propsIcon, {size: 'sm'});\n    } else {\n      const IconEl = createSvgIconFromTree(propsIcon);\n      icon = <IconEl size=\"sm\" />;\n    }\n  }\n\n  return (\n    <div\n      className={clsx(\n        'compact-scrollbar flex flex-col justify-between overflow-x-auto overflow-y-hidden whitespace-nowrap rounded-panel border px-20 py-14',\n        colSpan,\n        rowSpan,\n      )}\n    >\n      <div className=\"flex items-center gap-6\">\n        {icon}\n        <h2 className=\"text-sm font-semibold\">{children}</h2>\n      </div>\n      <div className=\"flex gap-10\">\n        <div className=\"text-4xl font-medium text-main\">\n          <AnimatePresence initial={false} mode=\"wait\">\n            {isLoading ? (\n              <m.div key=\"skeleton\" {...opacityAnimation}>\n                <Skeleton className=\"min-w-40\" />\n              </m.div>\n            ) : (\n              <m.div key=\"value\" {...opacityAnimation}>\n                <FormattedValue type={type} value={currentValue} />\n              </m.div>\n            )}\n          </AnimatePresence>\n        </div>\n        {currentValue != null &&\n          (percentageChange != null || previousValue != null) && (\n            <div className=\"flex items-center gap-10\">\n              <TrendingIndicator\n                currentValue={currentValue}\n                previousValue={previousValue}\n                percentageChange={percentageChange}\n              />\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n\ninterface FormattedValueProps {\n  type: ReportCardProps['type'];\n  value: ReportCardProps['currentValue'];\n}\nfunction FormattedValue({type, value}: FormattedValueProps) {\n  if (value == null) return 'â€”';\n  switch (type) {\n    case 'fileSize':\n      return <FormattedBytes bytes={value} />;\n    case 'percentage':\n      return (\n        <FormattedNumber\n          value={value}\n          style=\"percent\"\n          maximumFractionDigits={1}\n        />\n      );\n    case 'durationInSeconds':\n      return <FormattedDuration seconds={value as number} verbose />;\n    default:\n      return <FormattedNumber value={value} />;\n  }\n}\n\ninterface TrendingIndicatorProps {\n  currentValue: number;\n  previousValue?: number | null;\n  percentageChange?: number;\n}\nfunction TrendingIndicator(props: TrendingIndicatorProps) {\n  const percentage = calculatePercentage(props);\n  let icon: ReactElement;\n  if (percentage > 0) {\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\n  } else if (percentage === 0) {\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\n  } else {\n    icon = <TrendingDownIcon className=\"text-danger\" />;\n  }\n\n  return (\n    <Fragment>\n      {icon}\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\n    </Fragment>\n  );\n}\n\nfunction calculatePercentage({\n  percentageChange,\n  previousValue,\n  currentValue,\n}: TrendingIndicatorProps) {\n  if (\n    percentageChange != null ||\n    previousValue == null ||\n    currentValue == null\n  ) {\n    return percentageChange ?? 0;\n  }\n\n  if (previousValue === 0) {\n    return 100;\n  }\n\n  return Math.round(((currentValue - previousValue) / previousValue) * 100);\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\n\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\n  direction?: 'horizontal' | 'vertical';\n  individualBarColors?: boolean;\n  data?: ReportMetric<DatasetItem>;\n}\nexport function BarChart({\n  data,\n  direction = 'vertical',\n  individualBarColors = false,\n  className,\n  ...props\n}: BarChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: individualBarColors\n          ? ChartColors.map(c => c[1])\n          : ChartColors[i][1],\n        borderColor: individualBarColors\n          ? ChartColors.map(c => c[0])\n          : ChartColors[i][0],\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode, individualBarColors]);\n\n  const isHorizontal = direction === 'horizontal';\n  const options: ChartOptions<'bar'> = useMemo(() => {\n    return {\n      indexAxis: isHorizontal ? 'y' : 'x',\n      parsing: {\n        xAxisKey: isHorizontal ? 'value' : 'label',\n        yAxisKey: isHorizontal ? 'label' : 'value',\n      },\n    };\n  }, [isHorizontal]);\n\n  return (\n    <BaseChart\n      type=\"bar\"\n      className={className}\n      data={formattedData}\n      options={options}\n      {...props}\n    />\n  );\n}\n","import React, {Fragment} from 'react';\nimport {LineChart} from '@common/charts/line-chart';\nimport {Trans} from '@ui/i18n/trans';\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\nimport {BarChart} from '@common/charts/bar-chart';\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\nimport {FormattedNumber} from '@ui/i18n/formatted-number';\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\n\ninterface AdminReportChartsProps {\n  report?: VisitorsReportData;\n  isLoading: boolean;\n}\nexport function VisitorsReportCharts({\n  report,\n  isLoading,\n}: AdminReportChartsProps) {\n  const totalViews = report?.pageViews.total;\n  return (\n    <Fragment>\n      <LineChart\n        colSpan=\"col-span-8\"\n        isLoading={isLoading}\n        data={report?.pageViews}\n        title={<Trans message=\"Pageviews\" />}\n        description={\n          totalViews ? (\n            <Trans\n              message=\":count total views\"\n              values={{count: <FormattedNumber value={totalViews} />}}\n            />\n          ) : null\n        }\n      />\n      <PolarAreaChart\n        colSpan=\"col-span-4\"\n        isLoading={isLoading}\n        data={report?.devices}\n        title={<Trans message=\"Top devices\" />}\n      />\n      <GeoChart\n        colSpan=\"col-span-7\"\n        isLoading={isLoading}\n        data={report?.locations}\n        title={<Trans message=\"Top locations\" />}\n      />\n      <BarChart\n        colSpan=\"col-span-5\"\n        isLoading={isLoading}\n        data={report?.browsers}\n        direction=\"horizontal\"\n        individualBarColors\n        hideLegend\n        title={<Trans message=\"Top browsers\" />}\n      />\n    </Fragment>\n  );\n}\n"],"names":["FormattedBytes","memo","bytes","jsx","Fragment","prettyBytes","Endpoint","useAdminReport","payload","useQuery","fetchAnalyticsReport","keepPreviousData","types","dateRange","params","apiClient","response","TrendingDownIcon","createSvgIcon","TrendingFlatIcon","AdminReportCardRow","report","isLoading","data","ReportCard","Trans","propsIcon","children","type","currentValue","previousValue","percentageChange","colSpan","rowSpan","icon","isValidElement","cloneElement","IconEl","createSvgIconFromTree","jsxs","clsx","AnimatePresence","m","opacityAnimation","Skeleton","FormattedValue","TrendingIndicator","value","FormattedNumber","FormattedDuration","props","percentage","calculatePercentage","TrendingUpIcon","BarChart","direction","individualBarColors","className","localeCode","useSelectedLocale","formattedData","useMemo","formatReportData","dataset","i","ChartColors","c","isHorizontal","options","BaseChart","VisitorsReportCharts","totalViews","LineChart","PolarAreaChart","GeoChart"],"mappings":"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"}